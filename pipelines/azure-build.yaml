name: build

trigger:
  tags:
    include: ["v*"]
pr: none

pool:
  vmImage: "ubuntu-22.04"

resources:
  containers:
    - container: redis
      image: redis
      ports:
        - 6379:6379
    - container: elasticsearch
      image: cccs/elasticsearch:8.10.2
      env:
        ES_JAVA_OPTS: "-Xms256m -Xmx512m"
        DISCOVERY_TYPE: "single-node"
        ELASTIC_PASSWORD: "devpass"
      ports:
        - 9200:9200
    - container: minio
      image: cccs/minio
      env:
        MINIO_ACCESS_KEY: al_storage_key
        MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
      ports:
        - 9000:9000

stages:
  - stage: build
    jobs:
      - job: build_package
        displayName: Build Package
        steps:
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs: { versionSpec: 3.11 }
          - script: |
              sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U wheel pip
              python setup.py bdist_wheel
          - publish: $(System.DefaultWorkingDirectory)/dist/
            artifact: dist
          - publish: $(System.DefaultWorkingDirectory)/pipelines/
            artifact: pipelines
          - publish: $(System.DefaultWorkingDirectory)/test/
            artifact: test
  - stage: test
    jobs:
      - job: run_test
        strategy:
          matrix:
            Python3_9:
              python.version: "3.9"
            Python3_10:
              python.version: "3.10"
            Python3_11:
              python.version: "3.11"
            Python3_12:
              python.version: "3.12"
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        steps:
          - checkout: none
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs:
              versionSpec: "$(python.version)"
          - download: current
            artifact: dist
          - download: current
            artifact: pipelines
          - download: current
            artifact: test
          - script: |
              set -x  # Echo commands before they are run
              # Check which version we are building
              export VERSION=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$VERSION" == *dev* ]]; then
                  export CONTAINER=latest
              else
                  export CONTAINER=stable
              fi
              # Run the container pulls in parallel, wait for them all to finish before next step
              sudo docker pull -q cccs/nginx-ssl-frontend &
              sudo docker pull -q cccs/assemblyline-ui:$CONTAINER &
              sudo docker pull -q cccs/assemblyline-ui-frontend:$CONTAINER &
              sudo docker pull -q cccs/assemblyline-socketio:$CONTAINER &
              wait
            displayName: Pull Containers
          - script: |
              set -x  # Echo commands before they are run
              # Check which version we are building
              export VERSION=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$VERSION" == *dev* ]]; then
                  export CONTAINER=latest
              else
                  export CONTAINER=stable
              fi
              # Install configuration file
              sudo mkdir -p /etc/assemblyline/
              sudo cp $(Pipeline.Workspace)/pipelines/config.yml /etc/assemblyline/
              # Start service containers that can't be started by azure properly
              sudo docker run -d --name nginx --network host --restart on-failure -e "FRONTEND_HOST=localhost" -e "UI_HOST=localhost" -e "SOCKET_HOST=localhost" -e "TEMPLATE=minimal" -e "FQDN=localhost" cccs/nginx-ssl-frontend
              sudo docker run -d --name alui --network host -e "WORKERS=1" -e "THREADS=1"  -v "/etc/assemblyline/config.yml":"/etc/assemblyline/config.yml" cccs/assemblyline-ui:$CONTAINER
              sudo docker run -d --name frontend --network host cccs/assemblyline-ui-frontend:$CONTAINER
              sudo docker run -d --name alsocketio --network host  -v "/etc/assemblyline/config.yml":"/etc/assemblyline/config.yml" cccs/assemblyline-socketio:$CONTAINER
              # Install depedency packages
              sudo apt-get update
              sudo apt-get install -y build-essential libffi-dev libfuzzy-dev python3-dev wget
              # Wait for the service containers to come online
              wget https://localhost --no-check-certificate --timeout=2 --retry-on-http-error=502 --waitretry=10 --retry-connrefused
            displayName: Setup Environment
          - script: |
              export VERSION=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              sudo env "PATH=$PATH" python -m pip install -f dist/ "assemblyline-client[test]==${VERSION}"
              sudo env "PATH=$PATH" python -m pip install -r test/requirements.txt
            workingDirectory: $(Pipeline.Workspace)
            displayName: Install assemblyline_client
          - script: |
              pytest -rsx -vv
            workingDirectory: $(Pipeline.Workspace)/test
            displayName: Test
  - stage: deploy
    jobs:
      - job: deploy
        displayName: Deploy packages and containers
        variables:
          - group: deployment-information
        steps:
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs: { versionSpec: 3.11 }
          - download: current
            artifact: dist
          - script: |
              set -xv  # Echo commands before they are run
              sudo env "PATH=$PATH" python -m pip install --no-cache-dir twine
              ls dist
              twine upload --skip-existing --repository-url $TEST_REPOSITORY_URL dist/*
            displayName: Deploy to Test PyPI
            workingDirectory: $(Pipeline.Workspace)
            env:
              TWINE_USERNAME: $(twineUsername)
              TWINE_PASSWORD: $(twinePasswordTest)
          - script: |
              set -xv  # Echo commands before they are run
              sudo env "PATH=$PATH" python -m pip install --no-cache-dir twine
              ls dist
              twine upload --skip-existing dist/*
            displayName: Deploy to PyPI
            workingDirectory: $(Pipeline.Workspace)
            env:
              TWINE_USERNAME: $(twineUsername)
              TWINE_PASSWORD: $(twinePassword)
