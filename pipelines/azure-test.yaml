name: tests

trigger: ["*"]
pr: ["*"]

variables:
  - name: "TAG"
    ${{ if eq(variables['System.PullRequest.TargetBranchName'], 'master') }}:
      value: "stable"
    ${{ else }}:
      value: "latest"


schedules:
  - cron: "0 6 * * 1" # Every monday morning
    displayName: Weekly build
    branches:
      include:
        - master
    always: true

pool:
  vmImage: "ubuntu-22.04"

resources:
  containers:
    - container: redis
      image: redis
      ports:
        - 6379:6379
    - container: elasticsearch
      image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
      env:
        xpack.security.enabled: true
        discovery.type: single-node
        ES_JAVA_OPTS: "-Xms256m -Xmx512m"
        ELASTIC_PASSWORD: devpass
      ports:
        - 9200:9200
    - container: minio
      image: cccs/minio
      env:
        MINIO_ACCESS_KEY: al_storage_key
        MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
      ports:
        - 9000:9000

jobs:
  - job: run_test
    strategy:
      matrix:
        Python3_9:
          python.version: "3.9"
        Python3_10:
          python.version: "3.10"
        Python3_11:
          python.version: "3.11"
        Python3_12:
          python.version: "3.12"
    timeoutInMinutes: 10
    services:
      elasticsearch: elasticsearch
      redis: redis
      minio: minio

    steps:
      - task: UsePythonVersion@0
        displayName: Set python version
        inputs:
          versionSpec: "$(python.version)"
      - script: |
          set -x  # Echo commands before they are run
          # Run the container pulls in parallel, wait for them all to finish before next step
          echo $TAG
          sudo docker pull -q cccs/nginx-ssl-frontend &
          sudo docker pull -q cccs/assemblyline-ui:$TAG &
          sudo docker pull -q cccs/assemblyline-ui-frontend:$TAG &
          sudo docker pull -q cccs/assemblyline-socketio:$TAG &
          wait
        displayName: Pull Containers
      - script: |
          set -x  # Echo commands before they are run
          # Install configuration file
          sudo mkdir -p /etc/assemblyline/
          sudo cp pipelines/config.yml /etc/assemblyline/
          # Start service containers that can't be started by azure properly
          sudo docker run -d --name nginx --network host --restart on-failure -e "FRONTEND_HOST=localhost" -e "UI_HOST=localhost" -e "SOCKET_HOST=localhost" -e "TEMPLATE=minimal" -e "FQDN=localhost" cccs/nginx-ssl-frontend
          sudo docker run -d --name alui --network host -e "WORKERS=1" -e "THREADS=1"  -v "/etc/assemblyline/config.yml":"/etc/assemblyline/config.yml" cccs/assemblyline-ui:$TAG
          sudo docker run -d --name frontend --network host cccs/assemblyline-ui-frontend:$TAG
          sudo docker run -d --name alsocketio --network host  -v "/etc/assemblyline/config.yml":"/etc/assemblyline/config.yml" cccs/assemblyline-socketio:$TAG
          # Install depedency packages
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev libfuzzy-dev python3-dev wget
          # Wait for the service containers to come online
          wget https://localhost --no-check-certificate --timeout=2 --retry-on-http-error=502 --waitretry=10 --retry-connrefused
        displayName: Setup Environment
      - script: |
          sudo env "PATH=$PATH" python -m pip install --pre assemblyline
          sudo env "PATH=$PATH" python -m pip install --no-cache-dir -e . -r test/requirements.txt
        displayName: Install assemblyline_client
      - script: |
          pytest -rsx -vv
        displayName: Test
